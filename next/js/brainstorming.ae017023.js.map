{"version":3,"sources":["webpack:///./src/views/Brainstorming.vue","webpack:///./src/components/brainstorming/Coverage.vue","webpack:///./src/components/brainstorming/Coverage.vue?5d5d","webpack:///./src/components/brainstorming/Coverage.vue?a4fc","webpack:///./src/components/brainstorming/Rates.vue","webpack:///./src/components/brainstorming/Rates.vue?403e","webpack:///./src/components/brainstorming/Rates.vue?3aca","webpack:///./src/components/brainstorming/ReviewsByMonth.vue","webpack:///./src/components/brainstorming/ReviewsByMonth.vue?8706","webpack:///./src/components/brainstorming/ReviewsByMonth.vue?3d74","webpack:///./src/components/brainstorming/Synch.vue","webpack:///./src/components/brainstorming/Synch.vue?0001","webpack:///./src/components/brainstorming/Synch.vue?6356","webpack:///./src/views/Brainstorming.vue?7df0","webpack:///./src/views/Brainstorming.vue?2593","webpack:///./src/views/Brainstorming.vue?93fc"],"names":["class","title","$t","navi-back","icon","update","$store","getters","empty","progress","state","determinate","chart-type","chart-datasets","datasets","chart-labels","labels","chart-options","options","plugins","legend","display","position","rate","this","toFixed","updateData","nominations","data","queries","nomination","query","brainstorming","contains","then","push","Promise","allSettled","dataset","backgroundColor","colors","borderAlign","borderColor","hoverBackgroundColor","hoverBorderColor","components","ChartBlock","ChartView","i18n","messages","render","elements","line","tension","scales","r","min","max","ticks","stepSize","stats","i","count","updateReviewItem","item","rateInt","parseInt","isNaN","getFromLocal","record","key","value","Object","entries","startsWith","review","JSON","quality","description","cultural","uniqueness","safety","location","map","x","type","time","unit","tooltipFormat","displayFormats","month","tooltip","mode","Map","length","fromMillis","confirmedTime","startOf","valueOf","Timestamp","set","get","y","sort","a","b","pointBackgroundColor","pointRadius","fill","status","umi","StatusCode","Pending","rejected","duplicated","Rejected","reasons","includes","Reason","close","stars","Status","idle","register","defaults","maintainAspectRatio","boxWidth","intersect","queryingBrainstorming","service","updateBrainstorming","delibird","inform","MaterialTopAppBar","MaterialTopAppBarAdjust","MaterialIconButton","MaterialLinearProgress","CoverageChart","Coverage","RatesChart","Rates","SynchChart","Synch","ReviewsByMonthChart","ReviewsByMonth"],"mappings":"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","file":"js/brainstorming.ae017023.js","sourcesContent":["<template>\n<material-top-app-bar :title=\"$t('title')\" navi-back>\n    <material-icon-button v-if=\"canUpdate\" icon=\"redo\" :title=\"$t('update')\" @click=\"update\"/>\n</material-top-app-bar>\n<material-top-app-bar-adjust/>\n<main v-if=\"!$store.getters.empty\" class=\"brainstorming\">\n    <div v-if=\"updating\" class=\"progress\">\n        <div>{{ $t('updating') }}</div>\n        <material-linear-progress :progress=\"$store.state.progress\" determinate/>\n    </div>\n    <div v-if=\"idle\" class=\"grid grid--1-1-1\">\n        <coverage-chart/>\n        <rates-chart/>\n        <synch-chart/>\n    </div>\n    <reviews-by-month-chart v-if=\"idle\"/>\n</main>\n</template>\n\n<script lang=\"ts\">\nimport {\n    Chart,\n    ArcElement, LineElement, PointElement,\n    DoughnutController, LineController, RadarController,\n    RadialLinearScale, LinearScale, TimeScale,\n    Filler, Tooltip, Legend,\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport { service } from '@/service';\nimport { delibird } from '@/service/delibird';\nimport { State } from '@/store';\n\nimport MaterialIconButton from '@/components/material/IconButton.vue';\nimport MaterialLinearProgress from '@/components/material/LinearProgress.vue';\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CoverageChart from '@/components/brainstorming/Coverage.vue';\nimport RatesChart from '@/components/brainstorming/Rates.vue';\nimport ReviewsByMonthChart from '@/components/brainstorming/ReviewsByMonth.vue';\nimport SynchChart from '@/components/brainstorming/Synch.vue';\n\nimport locales from './Brainstorming.locales.json';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        MaterialIconButton,\n        MaterialLinearProgress,\n        CoverageChart, RatesChart, SynchChart,\n        ReviewsByMonthChart\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class Brainstorming extends Vue {\n\n    get canUpdate(): boolean {\n        return !this.$store.getters.empty && this.$store.state.status === State.Status.idle;\n    }\n\n    created() {\n        Chart.register(\n            ArcElement, LineElement, PointElement,\n            DoughnutController, LineController, RadarController,\n            RadialLinearScale, LinearScale, TimeScale,\n            Filler, Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n\n    get updating(): boolean {\n        return this.$store.state.status === State.Status.queryingBrainstorming;\n    }\n\n    get idle(): boolean {\n        return this.$store.state.status === State.Status.idle;\n    }\n\n    async update() {\n        const count = await service.updateBrainstorming();\n        delibird.inform(this.$t('updateInform', { count: count }));\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.brainstorming {\n    padding: 1rem;\n\n    > .progress {\n        > .mdc-linear-progress {\n            margin-block-start: 0.4em;\n        }\n    }\n\n    > div:not(:first-child) {\n        margin-block-start: 0.6rem;\n    }\n\n    > .grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 0.6rem;\n\n        @media screen and (min-width: 600px) {\n            &--1-1-1 {\n                grid-template-columns: 1fr 1fr 1fr;\n            }\n        }\n    }\n}\n</style>","<template>\n<chart-block :title=\"title\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './Coverage.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class CoverageChart extends Vue {\n\n    private static readonly colors = [ 'royalblue', 'gray' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    datasets: Array<ChartDataset<'doughnut'>> = [];\n\n    private rate = 0;\n\n    get title(): string {\n        const title = this.$t('title');\n        if (this.rate === 0) return title;\n        return `${title} | ${this.rate.toFixed(2)}%`\n    }\n\n    get labels(): Array<string> {\n        return [ this.$t('covered'), this.$t('notCovered') ];\n    }\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const data = [ 0, 0 ];\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            const query = brainstorming.contains(nomination)\n                .then(contains => {\n                    data[contains ? 0 : 1]++;\n                })\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: CoverageChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: CoverageChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        this.datasets = [ dataset ];\n        if (data[0] > 0 || data[1] > 0) {\n            this.rate = data[0] / (data[0] + data[1]) * 100;\n        } else {\n            this.rate = 0;\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './Coverage.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class CoverageChart extends Vue {\n\n    private static readonly colors = [ 'royalblue', 'gray' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    datasets: Array<ChartDataset<'doughnut'>> = [];\n\n    private rate = 0;\n\n    get title(): string {\n        const title = this.$t('title');\n        if (this.rate === 0) return title;\n        return `${title} | ${this.rate.toFixed(2)}%`\n    }\n\n    get labels(): Array<string> {\n        return [ this.$t('covered'), this.$t('notCovered') ];\n    }\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const data = [ 0, 0 ];\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            const query = brainstorming.contains(nomination)\n                .then(contains => {\n                    data[contains ? 0 : 1]++;\n                })\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: CoverageChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: CoverageChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        this.datasets = [ dataset ];\n        if (data[0] > 0 || data[1] > 0) {\n            this.rate = data[0] / (data[0] + data[1]) * 100;\n        } else {\n            this.rate = 0;\n        }\n    }\n}\n","import { render } from \"./Coverage.vue?vue&type=template&id=3869abea\"\nimport script from \"./Coverage.vue?vue&type=script&lang=ts\"\nexport * from \"./Coverage.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block :title=\"$t('title')\">\n    <chart-view chart-type=\"radar\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './Rates.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class RatesChart extends Vue {\n\n    options: ChartOptions<'radar'> = {\n        elements: {\n            line: { tension: 0 }\n        },\n        scales: {\n            r: {\n                min: 1, max: 5,\n                ticks: { stepSize: 1 }\n            }\n        },\n        plugins: {\n            legend: { display: false },\n        }\n    };\n\n    datasets: Array<ChartDataset<'radar'>> = [];\n\n    get labels(): Array<string> {\n        return [\n            this.$t('quality'),\n            this.$t('description'),\n            this.$t('cultural'),\n            this.$t('uniqueness'),\n            this.$t('safety'),\n            this.$t('location')\n        ];\n    }\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        type ReviewItem = { count: number, rate: number };\n        const stats: Array<ReviewItem> = [];\n        for (let i = 0; i < 6; ++i) {\n            stats.push({ count: 0, rate: 0 });\n        }\n        const updateReviewItem = (rate: string, item: ReviewItem) => {\n            if (!rate) return;\n            const rateInt = parseInt(rate);\n            if (isNaN(rateInt)) return;\n            item.count++;\n            item.rate += rateInt;\n        };\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            const query = brainstorming.getFromLocal(nomination)\n                .then(record => {\n                    if (!record) return;\n                    for (const [key, value] of Object.entries(record)) {\n                        if (!key.startsWith('review_')) continue;\n                        const review = value as brainstorming.Review;\n                        updateReviewItem(review.JSON.quality, stats[0]);\n                        updateReviewItem(review.JSON.description, stats[1]);\n                        updateReviewItem(review.JSON.cultural, stats[2]);\n                        updateReviewItem(review.JSON.uniqueness, stats[3]);\n                        updateReviewItem(review.JSON.safety, stats[4]);\n                        updateReviewItem(review.JSON.location, stats[5]);\n                    }\n                });\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const data = stats.map(item => item.rate / item.count);\n        const dataset: ChartDataset<'radar'> = {\n            data: data,\n            borderColor: 'royalblue',\n        };\n        this.datasets = [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './Rates.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class RatesChart extends Vue {\n\n    options: ChartOptions<'radar'> = {\n        elements: {\n            line: { tension: 0 }\n        },\n        scales: {\n            r: {\n                min: 1, max: 5,\n                ticks: { stepSize: 1 }\n            }\n        },\n        plugins: {\n            legend: { display: false },\n        }\n    };\n\n    datasets: Array<ChartDataset<'radar'>> = [];\n\n    get labels(): Array<string> {\n        return [\n            this.$t('quality'),\n            this.$t('description'),\n            this.$t('cultural'),\n            this.$t('uniqueness'),\n            this.$t('safety'),\n            this.$t('location')\n        ];\n    }\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        type ReviewItem = { count: number, rate: number };\n        const stats: Array<ReviewItem> = [];\n        for (let i = 0; i < 6; ++i) {\n            stats.push({ count: 0, rate: 0 });\n        }\n        const updateReviewItem = (rate: string, item: ReviewItem) => {\n            if (!rate) return;\n            const rateInt = parseInt(rate);\n            if (isNaN(rateInt)) return;\n            item.count++;\n            item.rate += rateInt;\n        };\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            const query = brainstorming.getFromLocal(nomination)\n                .then(record => {\n                    if (!record) return;\n                    for (const [key, value] of Object.entries(record)) {\n                        if (!key.startsWith('review_')) continue;\n                        const review = value as brainstorming.Review;\n                        updateReviewItem(review.JSON.quality, stats[0]);\n                        updateReviewItem(review.JSON.description, stats[1]);\n                        updateReviewItem(review.JSON.cultural, stats[2]);\n                        updateReviewItem(review.JSON.uniqueness, stats[3]);\n                        updateReviewItem(review.JSON.safety, stats[4]);\n                        updateReviewItem(review.JSON.location, stats[5]);\n                    }\n                });\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const data = stats.map(item => item.rate / item.count);\n        const dataset: ChartDataset<'radar'> = {\n            data: data,\n            borderColor: 'royalblue',\n        };\n        this.datasets = [ dataset ];\n    }\n}\n","import { render } from \"./Rates.vue?vue&type=template&id=ee470c76\"\nimport script from \"./Rates.vue?vue&type=script&lang=ts\"\nexport * from \"./Rates.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block :title=\"$t('title')\">\n    <chart-view chart-type=\"line\" :chart-datasets=\"datasets\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock, { fillTimeCountMap } from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './ReviewsByMonth.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class ReviewsByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            legend: { display: false },\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    datasets: Array<ChartDataset<'line'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const stats = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            const queries: Array<Promise<void>> = [];\n            for (const nomination of nominations) {\n                const query = brainstorming.getFromLocal(nomination)\n                    .then(record => {\n                        if (!record) return;\n                        for (const [key, value] of Object.entries(record)) {\n                            if (!key.startsWith('review_')) continue;\n                            const review = value as brainstorming.Review;\n                            const time = DateTime.fromMillis(review.Timestamp).startOf('month').valueOf();\n                            if (time < min) min = time;\n                            else if (time > max) max = time;\n                            stats.set(time, (stats.get(time) ?? 0) + 1);\n                        }\n                    });\n                queries.push(query);\n            }\n            await Promise.allSettled(queries);\n            fillTimeCountMap(stats, min, max);\n        }\n        const data:  Array<{ x: number, y: number }> = [];\n        for (const [time, count] of stats) {\n            data.push({ x: time, y: count });\n        }\n        data.sort((a, b) => a.x - b.x);\n\n        const dataset: ChartDataset<'line'> = {\n            data: data,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: true,\n        };\n        this.datasets = [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock, { fillTimeCountMap } from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './ReviewsByMonth.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class ReviewsByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            legend: { display: false },\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    datasets: Array<ChartDataset<'line'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const stats = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            const queries: Array<Promise<void>> = [];\n            for (const nomination of nominations) {\n                const query = brainstorming.getFromLocal(nomination)\n                    .then(record => {\n                        if (!record) return;\n                        for (const [key, value] of Object.entries(record)) {\n                            if (!key.startsWith('review_')) continue;\n                            const review = value as brainstorming.Review;\n                            const time = DateTime.fromMillis(review.Timestamp).startOf('month').valueOf();\n                            if (time < min) min = time;\n                            else if (time > max) max = time;\n                            stats.set(time, (stats.get(time) ?? 0) + 1);\n                        }\n                    });\n                queries.push(query);\n            }\n            await Promise.allSettled(queries);\n            fillTimeCountMap(stats, min, max);\n        }\n        const data:  Array<{ x: number, y: number }> = [];\n        for (const [time, count] of stats) {\n            data.push({ x: time, y: count });\n        }\n        data.sort((a, b) => a.x - b.x);\n\n        const dataset: ChartDataset<'line'> = {\n            data: data,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: true,\n        };\n        this.datasets = [ dataset ];\n    }\n}\n","import { render } from \"./ReviewsByMonth.vue?vue&type=template&id=ee491f5e\"\nimport script from \"./ReviewsByMonth.vue?vue&type=script&lang=ts\"\nexport * from \"./ReviewsByMonth.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block :title=\"title\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './Synch.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class CoverageChart extends Vue {\n\n    private static readonly colors = [ 'royalblue', 'gray' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    datasets: Array<ChartDataset<'doughnut'>> = [];\n\n    private rate = 0;\n\n    get title(): string {\n        const title = this.$t('title');\n        if (this.rate === 0) return title;\n        return `${title} | ${this.rate.toFixed(2)}%`\n    }\n\n    get labels(): Array<string> {\n        return [ this.$t('synched'), this.$t('notSynched') ];\n    }\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const data = [ 0, 0 ];\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            if (nomination.status === umi.StatusCode.Pending) continue;\n            let rejected = true;\n            let duplicated = false;\n            if (nomination.status === umi.StatusCode.Rejected) {\n                if (nomination.reasons.includes(umi.Reason.duplicated)) {\n                    duplicated = true\n                } else if (nomination.reasons.includes(umi.Reason.close)) {\n                    rejected = false;\n                }\n            } else {\n                rejected = false;\n            }\n            const query = brainstorming.getFromLocal(nomination)\n                .then(record => {\n                    if (!record) return;\n                    for (const [key, value] of Object.entries(record)) {\n                        if (!key.startsWith('review_')) continue;\n                        const review = value as brainstorming.Review;\n                        // Duplicated\n                        if (review.stars === 'D') {\n                            data[duplicated ? 0 : 1]++;\n                            continue;\n                        }\n                        const stars = parseInt(review.stars);\n                        if (isNaN(stars)) continue;\n                        if ((stars < 3 && rejected) || (stars >= 3 && !rejected)) {\n                            data[0]++;\n                        } else {\n                            data[1]++\n                        }\n                    }\n                });\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: CoverageChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: CoverageChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        this.datasets = [ dataset ];\n        if (data[0] > 0 || data[1] > 0) {\n            this.rate = data[0] / (data[0] + data[1]) * 100;\n        } else {\n            this.rate = 0;\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\nimport locales from './Synch.locales.json';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class CoverageChart extends Vue {\n\n    private static readonly colors = [ 'royalblue', 'gray' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    datasets: Array<ChartDataset<'doughnut'>> = [];\n\n    private rate = 0;\n\n    get title(): string {\n        const title = this.$t('title');\n        if (this.rate === 0) return title;\n        return `${title} | ${this.rate.toFixed(2)}%`\n    }\n\n    get labels(): Array<string> {\n        return [ this.$t('synched'), this.$t('notSynched') ];\n    }\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const data = [ 0, 0 ];\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            if (nomination.status === umi.StatusCode.Pending) continue;\n            let rejected = true;\n            let duplicated = false;\n            if (nomination.status === umi.StatusCode.Rejected) {\n                if (nomination.reasons.includes(umi.Reason.duplicated)) {\n                    duplicated = true\n                } else if (nomination.reasons.includes(umi.Reason.close)) {\n                    rejected = false;\n                }\n            } else {\n                rejected = false;\n            }\n            const query = brainstorming.getFromLocal(nomination)\n                .then(record => {\n                    if (!record) return;\n                    for (const [key, value] of Object.entries(record)) {\n                        if (!key.startsWith('review_')) continue;\n                        const review = value as brainstorming.Review;\n                        // Duplicated\n                        if (review.stars === 'D') {\n                            data[duplicated ? 0 : 1]++;\n                            continue;\n                        }\n                        const stars = parseInt(review.stars);\n                        if (isNaN(stars)) continue;\n                        if ((stars < 3 && rejected) || (stars >= 3 && !rejected)) {\n                            data[0]++;\n                        } else {\n                            data[1]++\n                        }\n                    }\n                });\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: CoverageChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: CoverageChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        this.datasets = [ dataset ];\n        if (data[0] > 0 || data[1] > 0) {\n            this.rate = data[0] / (data[0] + data[1]) * 100;\n        } else {\n            this.rate = 0;\n        }\n    }\n}\n","import { render } from \"./Synch.vue?vue&type=template&id=82333410\"\nimport script from \"./Synch.vue?vue&type=script&lang=ts\"\nexport * from \"./Synch.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport {\n    Chart,\n    ArcElement, LineElement, PointElement,\n    DoughnutController, LineController, RadarController,\n    RadialLinearScale, LinearScale, TimeScale,\n    Filler, Tooltip, Legend,\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport { service } from '@/service';\nimport { delibird } from '@/service/delibird';\nimport { State } from '@/store';\n\nimport MaterialIconButton from '@/components/material/IconButton.vue';\nimport MaterialLinearProgress from '@/components/material/LinearProgress.vue';\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CoverageChart from '@/components/brainstorming/Coverage.vue';\nimport RatesChart from '@/components/brainstorming/Rates.vue';\nimport ReviewsByMonthChart from '@/components/brainstorming/ReviewsByMonth.vue';\nimport SynchChart from '@/components/brainstorming/Synch.vue';\n\nimport locales from './Brainstorming.locales.json';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        MaterialIconButton,\n        MaterialLinearProgress,\n        CoverageChart, RatesChart, SynchChart,\n        ReviewsByMonthChart\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class Brainstorming extends Vue {\n\n    get canUpdate(): boolean {\n        return !this.$store.getters.empty && this.$store.state.status === State.Status.idle;\n    }\n\n    created() {\n        Chart.register(\n            ArcElement, LineElement, PointElement,\n            DoughnutController, LineController, RadarController,\n            RadialLinearScale, LinearScale, TimeScale,\n            Filler, Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n\n    get updating(): boolean {\n        return this.$store.state.status === State.Status.queryingBrainstorming;\n    }\n\n    get idle(): boolean {\n        return this.$store.state.status === State.Status.idle;\n    }\n\n    async update() {\n        const count = await service.updateBrainstorming();\n        delibird.inform(this.$t('updateInform', { count: count }));\n    }\n}\n","import { render } from \"./Brainstorming.vue?vue&type=template&id=3eba1927\"\nimport script from \"./Brainstorming.vue?vue&type=script&lang=ts\"\nexport * from \"./Brainstorming.vue?vue&type=script&lang=ts\"\n\nimport \"./Brainstorming.vue?vue&type=style&index=0&id=3eba1927&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Brainstorming.vue?vue&type=style&index=0&id=3eba1927&lang=scss\""],"sourceRoot":""}