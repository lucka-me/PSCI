{"version":3,"sources":["webpack:///./src/views/Charts.vue","webpack:///./src/components/charts/CountByMonth.vue","webpack:///./src/components/charts/ChartBlock.vue","webpack:///./src/components/charts/ChartBlock.vue?6324","webpack:///./src/components/charts/ChartBlock.vue?f3f2","webpack:///./src/components/charts/ChartView.vue","webpack:///./src/components/charts/ChartView.vue?8f77","webpack:///./src/components/charts/ChartView.vue?ff85","webpack:///./src/components/charts/CountByMonth.vue?045b","webpack:///./src/components/charts/CountByMonth.vue?0ffd","webpack:///./src/components/charts/Interval.vue","webpack:///./src/components/charts/Interval.vue?0c93","webpack:///./src/components/charts/Interval.vue?4386","webpack:///./src/components/charts/Quotas.vue","webpack:///./src/components/charts/Quotas.vue?03b6","webpack:///./src/components/charts/Quotas.vue?1bd8","webpack:///./src/components/charts/Reasons.vue","webpack:///./src/components/charts/Reasons.vue?d24c","webpack:///./src/components/charts/Reasons.vue?6b9c","webpack:///./src/components/charts/Status.vue","webpack:///./src/components/charts/Status.vue?b9cd","webpack:///./src/components/charts/Status.vue?fe82","webpack:///./src/views/Charts.vue?d190","webpack:///./src/views/Charts.vue?5cfe","webpack:///./src/views/Charts.vue?7bcb","webpack:///./src/components/charts/ChartView.vue?aab3","webpack:///./src/components/charts/ChartBlock.vue?441e"],"names":["class","title","navi-back","$store","getters","empty","chart-type","chart-datasets","datasets","chart-options","options","fillTimeCountMap","map","start","end","scan","month","fromMillis","startOf","key","valueOf","has","set","endOf","String","render","this","chart","$el","querySelector","type","chartType","data","labels","chartLabels","chartDatasets","chartOptions","destroy","newVal","_","required","Array","Object","scales","x","time","unit","tooltipFormat","displayFormats","plugins","tooltip","mode","nominations","state","mapSubmissions","Map","mapResults","length","min","confirmedTime","max","nomination","get","resultTime","dataSubmissions","dataResults","count","push","y","sort","a","b","datasetSubmissions","label","borderColor","pointBackgroundColor","pointRadius","fill","datasetResults","components","ChartBlock","ChartView","chart-labels","legend","display","stats","pair","interval","dataset","backgroundColor","hoverBackgroundColor","raw","reduce","status","umi","StatusCode","Pending","timeValid","Math","floor","timeDay","i","now","Date","restoreTime","opitons","position","values","colors","color","borderAlign","hoverBorderColor","code","reason","Rejected","reasons","Reason","undeclared","keys","register","defaults","maintainAspectRatio","boxWidth","intersect","elements","line","tension","MaterialTopAppBar","MaterialTopAppBarAdjust","StatusChart","Status","ReasonsChart","Reasons","CountByMonthChart","CountByMonth","IntervalChart","Interval","QuotasChart","Quotas"],"mappings":"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","file":"js/charts.9157d5d1.js","sourcesContent":["<template>\n<material-top-app-bar title=\"Charts\" navi-back/>\n<material-top-app-bar-adjust/>\n<main v-if=\"!$store.getters.empty\" class=\"charts\">\n    <div class=\"grid grid--1-2\">\n        <status-chart/>\n        <reasons-chart/>\n    </div>\n    <count-by-month-chart/>\n    <div class=\"grid grid--2-1\">\n        <interval-chart/>\n        <quotas-chart/>\n    </div>\n</main>\n</template>\n\n<script lang=\"ts\">\nimport {\n    Chart,\n    ArcElement, BarElement, LineElement, PointElement,\n    BarController, DoughnutController, LineController,\n    CategoryScale, LogarithmicScale, LinearScale, TimeScale,\n    Tooltip, Legend\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CountByMonthChart from '@/components/charts/CountByMonth.vue';\nimport IntervalChart from '@/components/charts/Interval.vue';\nimport QuotasChart from '@/components/charts/Quotas.vue';\nimport ReasonsChart from '@/components/charts/Reasons.vue';\nimport StatusChart from '@/components/charts/Status.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        StatusChart, ReasonsChart,\n        CountByMonthChart,\n        IntervalChart, QuotasChart\n    },\n})\nexport default class Charts extends Vue {\n\n    created() {\n        Chart.register(\n            ArcElement, BarElement, LineElement, PointElement,\n            BarController, DoughnutController, LineController,\n            CategoryScale, LinearScale, LogarithmicScale, TimeScale,\n            Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.charts {\n    padding: 1rem;\n\n    > div:not(:first-child) {\n        margin-block-start: 0.6rem;\n    }\n\n    > .grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 0.6rem;\n\n        @media screen and (min-width: 600px) {\n            &--1-1 {\n                grid-template-columns: 1fr 1fr;\n            }\n\n            &--1-2 {\n                grid-template-columns: 1fr 2fr;\n            }\n\n            &--2-1 {\n                grid-template-columns: 2fr 1fr;\n            }\n        }\n    }\n}\n</style>","<template>\n<chart-block title=\"Count by Month\">\n    <chart-view chart-type=\"line\" :chart-datasets=\"datasets\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock, { fillTimeCountMap } from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class CountByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    get datasets(): Array<ChartDataset<'line'>> {\n        const nominations = this.$store.state.nominations;\n        const mapSubmissions = new Map<number, number>();\n        const mapResults = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            for (const nomination of nominations) {\n                if (nomination.confirmedTime > 0) {\n                    const time = DateTime.fromMillis(nomination.confirmedTime).startOf('month').valueOf();\n                    if (time < min) min = time;\n                    else if (time > max) max = time;\n                    mapSubmissions.set(time, (mapSubmissions.get(time) ?? 0) + 1);\n                }\n                if (nomination.resultTime > 0) {\n                    const time = DateTime.fromMillis(nomination.resultTime).startOf('month').valueOf();\n                    if (time > max) max = time;\n                    mapResults.set(time, (mapResults.get(time) ?? 0) + 1);\n                }\n            }\n            fillTimeCountMap(mapSubmissions, min, max);\n            fillTimeCountMap(mapResults, min, max);\n        }\n        const dataSubmissions: Array<{ x: number, y: number }> = [];\n        const dataResults: Array<{ x: number, y: number }> = [];\n        for (const [time, count] of mapSubmissions) {\n            dataSubmissions.push({ x: time, y: count });\n        }\n        for (const [time, count] of mapResults) {\n            dataResults.push({ x: time, y: count });\n        }\n        dataSubmissions.sort((a, b) => a.x - b.x);\n        dataResults.sort((a, b) => a.x - b.x);\n\n        const datasetSubmissions: ChartDataset<'line'> = {\n            label: 'Submissions',\n            data: dataSubmissions,\n            borderColor: 'orange',\n            pointBackgroundColor: 'orange',\n            pointRadius: 0,\n            fill: false,\n        };\n        const datasetResults: ChartDataset<'line'> = {\n            label: 'Results',\n            data: dataResults,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: false,\n        };\n        return [ datasetSubmissions, datasetResults ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","<template>\n<div class=\"chart\">\n    <span>{{ title }}</span>\n    <slot/>\n</div>\n</template>\n\n<script lang=\"ts\">\nimport { DateTime } from 'luxon';\nimport { Vue, Prop } from 'vue-property-decorator';\n\nexport default class ChartBlock extends Vue {\n    @Prop(String) readonly title!: string;\n}\n\n/**\n * Fill the <time, count> map with empty months\n * @param dataMap The map to be filled\n * @param start Start time\n * @param end End time\n */\nexport function fillTimeCountMap(map: Map<number, number>, start: number, end: number) {\n    let scan = start;\n    while (scan <= end) {\n        const month = DateTime.fromMillis(scan + 1000).startOf('month');\n        const key = month.valueOf();\n        if (!map.has(key)) map.set(key, 0);\n        scan = month.endOf('month').valueOf();\n    }\n}\n</script>\n\n<style lang=\"scss\">\n@use '~@material/card';\n.chart {\n    @include card.shape-radius(card.$shape-radius);\n    @include card.outline(card.$outline-color);\n    padding: 0.4rem;\n    display: flex;\n    flex-flow: column nowrap;\n\n    > .chart-container {\n        margin-block-start: 0.2rem;\n        flex: 1;\n        height: 12rem;\n        min-height: 12rem;\n        max-height: 12rem;\n    }\n}\n</style>","\nimport { DateTime } from 'luxon';\nimport { Vue, Prop } from 'vue-property-decorator';\n\nexport default class ChartBlock extends Vue {\n    @Prop(String) readonly title!: string;\n}\n\n/**\n * Fill the <time, count> map with empty months\n * @param dataMap The map to be filled\n * @param start Start time\n * @param end End time\n */\nexport function fillTimeCountMap(map: Map<number, number>, start: number, end: number) {\n    let scan = start;\n    while (scan <= end) {\n        const month = DateTime.fromMillis(scan + 1000).startOf('month');\n        const key = month.valueOf();\n        if (!map.has(key)) map.set(key, 0);\n        scan = month.endOf('month').valueOf();\n    }\n}\n","import { render } from \"./ChartBlock.vue?vue&type=template&id=a5226a84\"\nimport script from \"./ChartBlock.vue?vue&type=script&lang=ts\"\nexport * from \"./ChartBlock.vue?vue&type=script&lang=ts\"\n\nimport \"./ChartBlock.vue?vue&type=style&index=0&id=a5226a84&lang=scss\"\nscript.render = render\n\nexport default script","<template>\n<div class=\"chart-container\"><canvas/></div>\n</template>\n\n<script lang=\"ts\">\nimport { Chart, ChartDataset, ChartOptions, ChartType, DefaultDataPoint } from 'chart.js';\nimport { Vue, Prop, Watch } from 'vue-property-decorator';\n\nexport default class ChartView<\n    TType extends ChartType = ChartType,\n    TData = DefaultDataPoint<TType>,\n    TLabel = unknown\n> extends Vue {\n\n    @Prop({ type: String, required: true }) readonly chartType!: TType;\n    @Prop({ type: Array, required: true }) readonly chartDatasets!: Array<ChartDataset<TType, TData>>;\n    @Prop({ type: Array }) readonly chartLabels?: Array<TLabel>;\n    @Prop({ type: Object }) readonly chartOptions?: ChartOptions<TType>;\n\n    $el!: HTMLDivElement;\n\n    private chart?: Chart<TType, TData, TLabel>;\n    \n    mounted() {\n        this.chart = new Chart(this.$el.querySelector('canvas')!, {\n            type: this.chartType,\n            data: {\n                labels: this.chartLabels,\n                datasets: this.chartDatasets\n            },\n            options: this.chartOptions\n        });\n    }\n\n    unmounted() {\n        this.chart?.destroy();\n    }\n\n    @Watch('chartDataset')\n    onDatasetChanged(newVal: Array<ChartDataset<TType, TData>>, _: unknown) {\n        if (!this.chart) return;\n        this.chart.data.datasets = newVal;\n    }\n\n    @Watch('chartLabels')\n    onLabelsUpdated(newVal: Array<TLabel>, _: unknown) {\n        if (!this.chart) return;\n        this.chart.data.labels = newVal;\n    }\n}\n\nexport { ChartDataset, ChartOptions, ChartType };\n</script>\n\n<style lang=\"scss\">\n.chart-container {\n    position: relative;\n\n    > canvas {\n        width: 100% !important;\n        height: 100% !important;\n    }\n}\n</style>","\nimport { Chart, ChartDataset, ChartOptions, ChartType, DefaultDataPoint } from 'chart.js';\nimport { Vue, Prop, Watch } from 'vue-property-decorator';\n\nexport default class ChartView<\n    TType extends ChartType = ChartType,\n    TData = DefaultDataPoint<TType>,\n    TLabel = unknown\n> extends Vue {\n\n    @Prop({ type: String, required: true }) readonly chartType!: TType;\n    @Prop({ type: Array, required: true }) readonly chartDatasets!: Array<ChartDataset<TType, TData>>;\n    @Prop({ type: Array }) readonly chartLabels?: Array<TLabel>;\n    @Prop({ type: Object }) readonly chartOptions?: ChartOptions<TType>;\n\n    $el!: HTMLDivElement;\n\n    private chart?: Chart<TType, TData, TLabel>;\n    \n    mounted() {\n        this.chart = new Chart(this.$el.querySelector('canvas')!, {\n            type: this.chartType,\n            data: {\n                labels: this.chartLabels,\n                datasets: this.chartDatasets\n            },\n            options: this.chartOptions\n        });\n    }\n\n    unmounted() {\n        this.chart?.destroy();\n    }\n\n    @Watch('chartDataset')\n    onDatasetChanged(newVal: Array<ChartDataset<TType, TData>>, _: unknown) {\n        if (!this.chart) return;\n        this.chart.data.datasets = newVal;\n    }\n\n    @Watch('chartLabels')\n    onLabelsUpdated(newVal: Array<TLabel>, _: unknown) {\n        if (!this.chart) return;\n        this.chart.data.labels = newVal;\n    }\n}\n\nexport { ChartDataset, ChartOptions, ChartType };\n","import { render } from \"./ChartView.vue?vue&type=template&id=eebb502c\"\nimport script from \"./ChartView.vue?vue&type=script&lang=ts\"\nexport * from \"./ChartView.vue?vue&type=script&lang=ts\"\n\nimport \"./ChartView.vue?vue&type=style&index=0&id=eebb502c&lang=scss\"\nscript.render = render\n\nexport default script","\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock, { fillTimeCountMap } from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class CountByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    get datasets(): Array<ChartDataset<'line'>> {\n        const nominations = this.$store.state.nominations;\n        const mapSubmissions = new Map<number, number>();\n        const mapResults = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            for (const nomination of nominations) {\n                if (nomination.confirmedTime > 0) {\n                    const time = DateTime.fromMillis(nomination.confirmedTime).startOf('month').valueOf();\n                    if (time < min) min = time;\n                    else if (time > max) max = time;\n                    mapSubmissions.set(time, (mapSubmissions.get(time) ?? 0) + 1);\n                }\n                if (nomination.resultTime > 0) {\n                    const time = DateTime.fromMillis(nomination.resultTime).startOf('month').valueOf();\n                    if (time > max) max = time;\n                    mapResults.set(time, (mapResults.get(time) ?? 0) + 1);\n                }\n            }\n            fillTimeCountMap(mapSubmissions, min, max);\n            fillTimeCountMap(mapResults, min, max);\n        }\n        const dataSubmissions: Array<{ x: number, y: number }> = [];\n        const dataResults: Array<{ x: number, y: number }> = [];\n        for (const [time, count] of mapSubmissions) {\n            dataSubmissions.push({ x: time, y: count });\n        }\n        for (const [time, count] of mapResults) {\n            dataResults.push({ x: time, y: count });\n        }\n        dataSubmissions.sort((a, b) => a.x - b.x);\n        dataResults.sort((a, b) => a.x - b.x);\n\n        const datasetSubmissions: ChartDataset<'line'> = {\n            label: 'Submissions',\n            data: dataSubmissions,\n            borderColor: 'orange',\n            pointBackgroundColor: 'orange',\n            pointRadius: 0,\n            fill: false,\n        };\n        const datasetResults: ChartDataset<'line'> = {\n            label: 'Results',\n            data: dataResults,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: false,\n        };\n        return [ datasetSubmissions, datasetResults ];\n    }\n}\n","import { render } from \"./CountByMonth.vue?vue&type=template&id=c8765dae\"\nimport script from \"./CountByMonth.vue?vue&type=script&lang=ts\"\nexport * from \"./CountByMonth.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Interval (Days)\">\n    <chart-view chart-type=\"bar\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class IntervalChart extends Vue {\n\n    private static readonly timeValid = 1325347200;\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        return this.stats.map((pair) => pair.interval);\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const data = this.stats.map((pair) => pair.count);\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Array<{ interval: number, count: number}> {\n        const nominations = this.$store.state.nominations;\n        const raw = nominations.reduce((map, nomination) => {\n            if (nomination.status === umi.StatusCode.Pending) return map;\n            if (nomination.confirmedTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < nomination.confirmedTime) return map;\n            const interval = Math.floor((nomination.resultTime - nomination.confirmedTime) / IntervalChart.timeDay);\n            map.set(interval, (map.get(interval) ?? 0) + 1);\n            return map;\n        }, new Map<number, number>());\n        const stats: Array<{ interval: number, count: number}> = [];\n        for (const [interval, count] of raw) {\n            stats.push({ interval: interval, count: count });\n        }\n        stats.sort((a, b) => a.interval - b.interval);\n        return stats;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class IntervalChart extends Vue {\n\n    private static readonly timeValid = 1325347200;\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        return this.stats.map((pair) => pair.interval);\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const data = this.stats.map((pair) => pair.count);\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Array<{ interval: number, count: number}> {\n        const nominations = this.$store.state.nominations;\n        const raw = nominations.reduce((map, nomination) => {\n            if (nomination.status === umi.StatusCode.Pending) return map;\n            if (nomination.confirmedTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < nomination.confirmedTime) return map;\n            const interval = Math.floor((nomination.resultTime - nomination.confirmedTime) / IntervalChart.timeDay);\n            map.set(interval, (map.get(interval) ?? 0) + 1);\n            return map;\n        }, new Map<number, number>());\n        const stats: Array<{ interval: number, count: number}> = [];\n        for (const [interval, count] of raw) {\n            stats.push({ interval: interval, count: count });\n        }\n        stats.sort((a, b) => a.interval - b.interval);\n        return stats;\n    }\n}\n","import { render } from \"./Interval.vue?vue&type=template&id=6b65deb0\"\nimport script from \"./Interval.vue?vue&type=script&lang=ts\"\nexport * from \"./Interval.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Quotas (Days)\">\n    <chart-view chart-type=\"bar\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class QuotasChart extends Vue {\n\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        const labels: Array<number> = [];\n        for (let i = 0; i < 14; i++) {\n            labels.push(i);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const nominations = this.$store.state.nominations;\n        const now = Date.now();\n        const data = new Array(14).fill(0);\n        for (const nomination of nominations) {\n            const restoreTime = nomination.restoreTime;\n            if (restoreTime > now) {\n                data[Math.floor((restoreTime - now) / QuotasChart.timeDay)] += 1;\n            }\n        }\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class QuotasChart extends Vue {\n\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        const labels: Array<number> = [];\n        for (let i = 0; i < 14; i++) {\n            labels.push(i);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const nominations = this.$store.state.nominations;\n        const now = Date.now();\n        const data = new Array(14).fill(0);\n        for (const nomination of nominations) {\n            const restoreTime = nomination.restoreTime;\n            if (restoreTime > now) {\n                data[Math.floor((restoreTime - now) / QuotasChart.timeDay)] += 1;\n            }\n        }\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n}\n","import { render } from \"./Quotas.vue?vue&type=template&id=f7334106\"\nimport script from \"./Quotas.vue?vue&type=script&lang=ts\"\nexport * from \"./Quotas.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Reasons\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"opitons\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class ReasonsChart extends Vue {\n\n    opitons: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const stats = this.stats;\n        const labels: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            labels.push(pair[0].title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = this.stats;\n        const data: Array<number> = [];\n        const colors: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            data.push(pair[1]);\n            colors.push(pair[0].color);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Map<umi.ReasonCode, [umi.Reason, number]> {\n        const stats = new Map<umi.ReasonCode, [umi.Reason, number]>();\n        for (const [code, reason] of umi.reason) {\n            stats.set(code, [reason, 0]);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            if (nomination.status !== umi.StatusCode.Rejected) return map;\n            if (nomination.reasons.length > 0) {\n                for (const code of nomination.reasons) {\n                    map.get(code)![1]++;\n                }\n            } else {\n                map.get(umi.Reason.undeclared)![1]++;\n            }\n            return map;\n        }, stats);\n        return stats;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class ReasonsChart extends Vue {\n\n    opitons: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const stats = this.stats;\n        const labels: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            labels.push(pair[0].title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = this.stats;\n        const data: Array<number> = [];\n        const colors: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            data.push(pair[1]);\n            colors.push(pair[0].color);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Map<umi.ReasonCode, [umi.Reason, number]> {\n        const stats = new Map<umi.ReasonCode, [umi.Reason, number]>();\n        for (const [code, reason] of umi.reason) {\n            stats.set(code, [reason, 0]);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            if (nomination.status !== umi.StatusCode.Rejected) return map;\n            if (nomination.reasons.length > 0) {\n                for (const code of nomination.reasons) {\n                    map.get(code)![1]++;\n                }\n            } else {\n                map.get(umi.Reason.undeclared)![1]++;\n            }\n            return map;\n        }, stats);\n        return stats;\n    }\n}\n","import { render } from \"./Reasons.vue?vue&type=template&id=6ad8c691\"\nimport script from \"./Reasons.vue?vue&type=script&lang=ts\"\nexport * from \"./Reasons.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Status\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class StatusChart extends Vue {\n\n    private static readonly colors = [ '#CAAF85', '#35C572', '#B0373C' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const labels: Array<string> = [];\n        for (const status of umi.status.values()) {\n            labels.push(status.title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = new Map<umi.StatusCode, number>();\n        for (const code of umi.status.keys()) {\n            stats.set(code, 0);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            map.set(nomination.status, map.get(nomination.status)! + 1);\n            return map;\n        }, stats);\n\n        const data: Array<number> = [];\n        for (const count of stats.values()) {\n            data.push(count);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: StatusChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: StatusChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class StatusChart extends Vue {\n\n    private static readonly colors = [ '#CAAF85', '#35C572', '#B0373C' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const labels: Array<string> = [];\n        for (const status of umi.status.values()) {\n            labels.push(status.title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = new Map<umi.StatusCode, number>();\n        for (const code of umi.status.keys()) {\n            stats.set(code, 0);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            map.set(nomination.status, map.get(nomination.status)! + 1);\n            return map;\n        }, stats);\n\n        const data: Array<number> = [];\n        for (const count of stats.values()) {\n            data.push(count);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: StatusChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: StatusChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n}\n","import { render } from \"./Status.vue?vue&type=template&id=1e7dffb0\"\nimport script from \"./Status.vue?vue&type=script&lang=ts\"\nexport * from \"./Status.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport {\n    Chart,\n    ArcElement, BarElement, LineElement, PointElement,\n    BarController, DoughnutController, LineController,\n    CategoryScale, LogarithmicScale, LinearScale, TimeScale,\n    Tooltip, Legend\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CountByMonthChart from '@/components/charts/CountByMonth.vue';\nimport IntervalChart from '@/components/charts/Interval.vue';\nimport QuotasChart from '@/components/charts/Quotas.vue';\nimport ReasonsChart from '@/components/charts/Reasons.vue';\nimport StatusChart from '@/components/charts/Status.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        StatusChart, ReasonsChart,\n        CountByMonthChart,\n        IntervalChart, QuotasChart\n    },\n})\nexport default class Charts extends Vue {\n\n    created() {\n        Chart.register(\n            ArcElement, BarElement, LineElement, PointElement,\n            BarController, DoughnutController, LineController,\n            CategoryScale, LinearScale, LogarithmicScale, TimeScale,\n            Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n}\n","import { render } from \"./Charts.vue?vue&type=template&id=6ff6bec6\"\nimport script from \"./Charts.vue?vue&type=script&lang=ts\"\nexport * from \"./Charts.vue?vue&type=script&lang=ts\"\n\nimport \"./Charts.vue?vue&type=style&index=0&id=6ff6bec6&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Charts.vue?vue&type=style&index=0&id=6ff6bec6&lang=scss\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./ChartView.vue?vue&type=style&index=0&id=eebb502c&lang=scss\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./ChartBlock.vue?vue&type=style&index=0&id=a5226a84&lang=scss\""],"sourceRoot":""}