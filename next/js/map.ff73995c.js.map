{"version":3,"sources":["webpack:///./src/views/NominationMap.vue?4e25","webpack:///./src/views/NominationMap.vue","webpack:///./src/views/NominationMap.vue?db87","webpack:///./src/views/NominationMap.vue?5e45"],"names":["class","id","title","navi-back","this","commonSense","list","$store","state","nominations","filter","nomination","lngLat","predicator","$route","query","status","code","parseInt","umi","get","reason","scanner","then","mapboxgl","ctrl","Map","container","accessToken","style","addControl","NavigationControl","FullscreenControl","once","resize","pourData","boundsNE","lng","lat","boundsSW","geoJSON","type","features","map","properties","geometry","coordinates","color","colorLight","addSource","data","cluster","addLayer","source","paint","layout","on","event","feature","clusterId","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","Math","abs","Popup","setLngLat","setText","addTo","fitBounds","linear","padding","components","MaterialTopAppBar","MaterialTopAppBarAdjust","render"],"mappings":"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","file":"js/map.ff73995c.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./NominationMap.vue?vue&type=style&index=0&id=1fc6ffa3&lang=scss\"","<template>\n<material-top-app-bar :title=\"title\" navi-back/>\n<material-top-app-bar-adjust/>\n<main class=\"ignore-safe-area nomination-map\">\n    <div id=\"map-container\"/>\n</main>\n</template>\n\n<script lang=\"ts\">\nimport { Options, Vue } from 'vue-class-component';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport Nomination from '@/service/nomination';\nimport { umi } from '@/service/umi';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n    },\n})\nexport default class NominationMap extends Vue {\n\n    private ctrl?: mapboxgl.Map;\n\n    get title(): string {\n        return this.commonSense?.title ?? 'All';\n    }\n\n    get nominations(): Array<Nomination> {\n        let list = this.$store.state.nominations.filter((nomination) => nomination.lngLat);\n        const commonSense = this.commonSense;\n        if (commonSense) list = list.filter(commonSense.predicator);\n        return list;\n    }\n\n    private get commonSense(): umi.CommonSense | null {\n        if (this.$route.query.status && typeof(this.$route.query.status) === 'string') {\n            const code = parseInt(this.$route.query.status);\n            return umi.status.get(code) || null;\n        }\n        if (this.$route.query.reason && typeof(this.$route.query.reason) === 'string') {\n            const code = parseInt(this.$route.query.reason);\n            return umi.reason.get(code) || null;\n        }\n        if (this.$route.query.scanner && typeof(this.$route.query.scanner) === 'string') {\n            const code = parseInt(this.$route.query.scanner);\n            return umi.scanner.get(code) || null;\n        }\n        return null;\n    }\n\n    mounted() {\n        import(\n            /* webpackChunkName: 'mapbox' */\n            'mapbox-gl'\n        ).then((mapboxgl) => {\n            this.ctrl = new mapboxgl.Map({\n                container: 'map-container',\n                accessToken: 'pk.eyJ1IjoibHVja2EtbWUiLCJhIjoiY2p2NDk5NmRvMHFreTQzbzduemM1MHV4cCJ9.7XGmxnEJRoCDr-i5BBmBfw',\n                style: 'mapbox://styles/mapbox/outdoors-v11',\n            });\n            this.ctrl.addControl(new mapboxgl.NavigationControl());\n            this.ctrl.addControl(new mapboxgl.FullscreenControl());\n            this.ctrl.once('idle', () => {\n                if (!this.ctrl) return;\n                this.ctrl.resize();\n                this.pourData();\n            });\n        });\n    }\n\n    private pourData() {\n        if (!this.ctrl) return;\n        const nominations = this.nominations;\n        // Generate GeoJSON and get bounds\n        const boundsNE = { lng: -181.0, lat: -91.0 };\n        const boundsSW = { lng:  181.0, lat:  91.0 };\n        const geoJSON: GeoJSON.FeatureCollection<GeoJSON.Geometry> = {\n            type: 'FeatureCollection',\n            features: nominations.map((nomination) => {\n                const lngLat = nomination.lngLat!;\n                if (lngLat.lng > boundsNE.lng) boundsNE.lng = lngLat.lng;\n                if (lngLat.lng < boundsSW.lng) boundsSW.lng = lngLat.lng;\n                if (lngLat.lat > boundsNE.lat) boundsNE.lat = lngLat.lat;\n                if (lngLat.lat < boundsSW.lat) boundsSW.lat = lngLat.lat;\n                return {\n                    type: 'Feature',\n                    properties: { title: nomination.title },\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [lngLat.lng, lngLat.lat],\n                    }\n                }\n            }),\n        };\n        const id = 'nominations';\n        const color = '#2578B5';\n        const colorLight = '#63A7E7';\n\n        // Add source and layers\n        this.ctrl.addSource(id, {\n            type: 'geojson',\n            data: geoJSON,\n            cluster: true,\n        });\n        this.ctrl.addLayer({\n            id: `${id}-cluster`,\n            type: 'circle',\n            source: id,\n            filter: ['has', 'point_count'],\n            paint: {\n                'circle-color': colorLight,\n                'circle-opacity': 0.6,\n                'circle-stroke-width': 4,\n                'circle-stroke-color': color,\n                'circle-radius': [\n                    'step', ['get', 'point_count'],\n                    20, 50,\n                    30, 100,\n                    40\n                ]\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-count`,\n            type: 'symbol',\n            source: id,\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12,\n            },\n            paint: {\n                'text-color': '#000',\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-unclustered`,\n            type: 'circle',\n            source: id,\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': colorLight,\n                'circle-radius': 5,\n                'circle-stroke-width': 2,\n                'circle-stroke-color': color\n            }\n        });\n\n        // Set listener\n        this.ctrl.on('click', `${id}-cluster`, event => {\n            if (!this.ctrl || !event.features) return;\n            const feature = event.features[0];\n            const clusterId = feature.properties!.cluster_id;\n            (this.ctrl.getSource(id) as mapboxgl.GeoJSONSource).getClusterExpansionZoom(\n                clusterId,\n                (err, zoom) => {\n                    if (!this.ctrl || err) return;\n                    this.ctrl.easeTo({\n                        center: (feature.geometry as GeoJSON.Point).coordinates as [number, number],\n                        zoom: zoom\n                    });\n                }\n            );\n        });\n\n        this.ctrl.on('click', `${id}-unclustered`, event => {\n            if (!this.ctrl || !event.features) return;\n            const feature = event.features[0];\n            const coordinates = (feature.geometry as GeoJSON.Point).coordinates as [number, number];\n            while (Math.abs(event.lngLat.lng - coordinates[0]) > 180) {\n                coordinates[0] += event.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            import(\n                /* webpackChunkName: 'mapbox' */\n                'mapbox-gl'\n            ).then((mapboxgl) => {\n                if (!this.ctrl) return;\n                new mapboxgl.Popup()\n                    .setLngLat(coordinates)\n                    .setText(feature.properties!.title)\n                    .addTo(this.ctrl);\n            });\n        });\n\n        // Fit the bounds\n        if (boundsSW.lng > -181) {\n            this.ctrl.fitBounds([boundsSW, boundsNE], { linear: true, padding: 16 });\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\nmain.nomination-map {\n    margin: 0;\n    flex: 1;\n\n    #map-container {\n        width: 100%;\n        height: 100%;\n\n        // Adjust for safe area\n        .mapboxgl-control-container {\n            > .mapboxgl-ctrl-top-left, > .mapboxgl-ctrl-bottom-left {\n                margin-left: env(safe-area-inset-left);\n            }\n            > .mapboxgl-ctrl-top-right, > .mapboxgl-ctrl-bottom-right {\n                margin-right: env(safe-area-inset-right);\n            }\n\n            > .mapboxgl-ctrl-bottom-left, > .mapboxgl-ctrl-bottom-right {\n                margin-bottom: env(safe-area-inset-bottom);\n            }\n        }\n    }\n}\n</style>","\nimport { Options, Vue } from 'vue-class-component';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport Nomination from '@/service/nomination';\nimport { umi } from '@/service/umi';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n    },\n})\nexport default class NominationMap extends Vue {\n\n    private ctrl?: mapboxgl.Map;\n\n    get title(): string {\n        return this.commonSense?.title ?? 'All';\n    }\n\n    get nominations(): Array<Nomination> {\n        let list = this.$store.state.nominations.filter((nomination) => nomination.lngLat);\n        const commonSense = this.commonSense;\n        if (commonSense) list = list.filter(commonSense.predicator);\n        return list;\n    }\n\n    private get commonSense(): umi.CommonSense | null {\n        if (this.$route.query.status && typeof(this.$route.query.status) === 'string') {\n            const code = parseInt(this.$route.query.status);\n            return umi.status.get(code) || null;\n        }\n        if (this.$route.query.reason && typeof(this.$route.query.reason) === 'string') {\n            const code = parseInt(this.$route.query.reason);\n            return umi.reason.get(code) || null;\n        }\n        if (this.$route.query.scanner && typeof(this.$route.query.scanner) === 'string') {\n            const code = parseInt(this.$route.query.scanner);\n            return umi.scanner.get(code) || null;\n        }\n        return null;\n    }\n\n    mounted() {\n        import(\n            /* webpackChunkName: 'mapbox' */\n            'mapbox-gl'\n        ).then((mapboxgl) => {\n            this.ctrl = new mapboxgl.Map({\n                container: 'map-container',\n                accessToken: 'pk.eyJ1IjoibHVja2EtbWUiLCJhIjoiY2p2NDk5NmRvMHFreTQzbzduemM1MHV4cCJ9.7XGmxnEJRoCDr-i5BBmBfw',\n                style: 'mapbox://styles/mapbox/outdoors-v11',\n            });\n            this.ctrl.addControl(new mapboxgl.NavigationControl());\n            this.ctrl.addControl(new mapboxgl.FullscreenControl());\n            this.ctrl.once('idle', () => {\n                if (!this.ctrl) return;\n                this.ctrl.resize();\n                this.pourData();\n            });\n        });\n    }\n\n    private pourData() {\n        if (!this.ctrl) return;\n        const nominations = this.nominations;\n        // Generate GeoJSON and get bounds\n        const boundsNE = { lng: -181.0, lat: -91.0 };\n        const boundsSW = { lng:  181.0, lat:  91.0 };\n        const geoJSON: GeoJSON.FeatureCollection<GeoJSON.Geometry> = {\n            type: 'FeatureCollection',\n            features: nominations.map((nomination) => {\n                const lngLat = nomination.lngLat!;\n                if (lngLat.lng > boundsNE.lng) boundsNE.lng = lngLat.lng;\n                if (lngLat.lng < boundsSW.lng) boundsSW.lng = lngLat.lng;\n                if (lngLat.lat > boundsNE.lat) boundsNE.lat = lngLat.lat;\n                if (lngLat.lat < boundsSW.lat) boundsSW.lat = lngLat.lat;\n                return {\n                    type: 'Feature',\n                    properties: { title: nomination.title },\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [lngLat.lng, lngLat.lat],\n                    }\n                }\n            }),\n        };\n        const id = 'nominations';\n        const color = '#2578B5';\n        const colorLight = '#63A7E7';\n\n        // Add source and layers\n        this.ctrl.addSource(id, {\n            type: 'geojson',\n            data: geoJSON,\n            cluster: true,\n        });\n        this.ctrl.addLayer({\n            id: `${id}-cluster`,\n            type: 'circle',\n            source: id,\n            filter: ['has', 'point_count'],\n            paint: {\n                'circle-color': colorLight,\n                'circle-opacity': 0.6,\n                'circle-stroke-width': 4,\n                'circle-stroke-color': color,\n                'circle-radius': [\n                    'step', ['get', 'point_count'],\n                    20, 50,\n                    30, 100,\n                    40\n                ]\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-count`,\n            type: 'symbol',\n            source: id,\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12,\n            },\n            paint: {\n                'text-color': '#000',\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-unclustered`,\n            type: 'circle',\n            source: id,\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': colorLight,\n                'circle-radius': 5,\n                'circle-stroke-width': 2,\n                'circle-stroke-color': color\n            }\n        });\n\n        // Set listener\n        this.ctrl.on('click', `${id}-cluster`, event => {\n            if (!this.ctrl || !event.features) return;\n            const feature = event.features[0];\n            const clusterId = feature.properties!.cluster_id;\n            (this.ctrl.getSource(id) as mapboxgl.GeoJSONSource).getClusterExpansionZoom(\n                clusterId,\n                (err, zoom) => {\n                    if (!this.ctrl || err) return;\n                    this.ctrl.easeTo({\n                        center: (feature.geometry as GeoJSON.Point).coordinates as [number, number],\n                        zoom: zoom\n                    });\n                }\n            );\n        });\n\n        this.ctrl.on('click', `${id}-unclustered`, event => {\n            if (!this.ctrl || !event.features) return;\n            const feature = event.features[0];\n            const coordinates = (feature.geometry as GeoJSON.Point).coordinates as [number, number];\n            while (Math.abs(event.lngLat.lng - coordinates[0]) > 180) {\n                coordinates[0] += event.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            import(\n                /* webpackChunkName: 'mapbox' */\n                'mapbox-gl'\n            ).then((mapboxgl) => {\n                if (!this.ctrl) return;\n                new mapboxgl.Popup()\n                    .setLngLat(coordinates)\n                    .setText(feature.properties!.title)\n                    .addTo(this.ctrl);\n            });\n        });\n\n        // Fit the bounds\n        if (boundsSW.lng > -181) {\n            this.ctrl.fitBounds([boundsSW, boundsNE], { linear: true, padding: 16 });\n        }\n    }\n}\n","import { render } from \"./NominationMap.vue?vue&type=template&id=1fc6ffa3\"\nimport script from \"./NominationMap.vue?vue&type=script&lang=ts\"\nexport * from \"./NominationMap.vue?vue&type=script&lang=ts\"\n\nimport \"./NominationMap.vue?vue&type=style&index=0&id=1fc6ffa3&lang=scss\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}