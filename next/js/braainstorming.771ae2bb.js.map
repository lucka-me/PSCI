{"version":3,"sources":["webpack:///./src/views/Brainstorming.vue","webpack:///./src/components/brainstorming/Coverage.vue","webpack:///./src/components/brainstorming/Coverage.vue?5d5d","webpack:///./src/components/brainstorming/Coverage.vue?a4fc","webpack:///./src/components/brainstorming/Rates.vue","webpack:///./src/components/brainstorming/Rates.vue?403e","webpack:///./src/components/brainstorming/Rates.vue?3aca","webpack:///./src/components/brainstorming/ReviewsByMonth.vue","webpack:///./src/components/brainstorming/ReviewsByMonth.vue?8706","webpack:///./src/components/brainstorming/ReviewsByMonth.vue?3d74","webpack:///./src/views/Brainstorming.vue?7df0","webpack:///./src/views/Brainstorming.vue?2593","webpack:///./src/views/Brainstorming.vue?0b4b"],"names":["class","title","navi-back","icon","update","$store","getters","empty","progress","state","determinate","chart-type","chart-datasets","datasets","chart-labels","labels","chart-options","options","plugins","legend","display","position","this","updateData","nominations","data","nomination","brainstorming","contains","dataset","backgroundColor","colors","borderAlign","borderColor","hoverBackgroundColor","hoverBorderColor","components","ChartBlock","ChartView","render","elements","line","tension","scales","r","min","max","ticks","stepSize","stats","i","push","count","rate","updateReviewItem","item","rateInt","parseInt","NaN","queries","query","getFromLocal","then","record","key","value","Object","entries","startsWith","review","JSON","quality","description","cultural","uniqueness","safety","location","Promise","allSettled","map","x","type","time","unit","tooltipFormat","displayFormats","month","tooltip","mode","Map","length","fromMillis","confirmedTime","startOf","valueOf","Timestamp","set","get","y","sort","a","b","label","pointBackgroundColor","pointRadius","fill","status","Status","idle","register","defaults","maintainAspectRatio","boxWidth","intersect","queryingBrainstorming","service","updateBrainstorming","delibird","inform","MaterialTopAppBar","MaterialTopAppBarAdjust","MaterialIconButton","MaterialLinearProgress","CoverageChart","Coverage","RatesChart","Rates","ReviewsByMonthChart","ReviewsByMonth"],"mappings":"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","file":"js/braainstorming.771ae2bb.js","sourcesContent":["<template>\n<material-top-app-bar title=\"Brainstorming\" navi-back>\n    <material-icon-button v-if=\"canUpdate\" icon=\"redo\" @click=\"update\" />\n</material-top-app-bar>\n<material-top-app-bar-adjust/>\n<main v-if=\"!$store.getters.empty\" class=\"brainstorming\">\n    <div v-if=\"updating\" class=\"progress\">\n        <div>Updating Brainstorming</div>\n        <material-linear-progress :progress=\"$store.state.progress\" determinate/>\n    </div>\n    <div v-if=\"idle\" class=\"grid grid--1-1-1\">\n        <coverage-chart/>\n        <rates-chart/>\n    </div>\n    <reviews-by-month-chart v-if=\"idle\"/>\n</main>\n</template>\n\n<script lang=\"ts\">\nimport {\n    Chart,\n    ArcElement, LineElement, PointElement,\n    DoughnutController, LineController, RadarController,\n    RadialLinearScale, LinearScale, TimeScale,\n    Filler, Tooltip, Legend,\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport { service } from '@/service';\nimport { delibird } from '@/service/delibird';\nimport { State } from '@/store';\n\nimport MaterialIconButton from '@/components/material/IconButton.vue';\nimport MaterialLinearProgress from '@/components/material/LinearProgress.vue';\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CoverageChart from '@/components/brainstorming/Coverage.vue';\nimport RatesChart from '@/components/brainstorming/Rates.vue';\nimport ReviewsByMonthChart from '@/components/brainstorming/ReviewsByMonth.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        MaterialIconButton,\n        MaterialLinearProgress,\n        CoverageChart,\n        RatesChart,\n        ReviewsByMonthChart\n    },\n})\nexport default class Brainstorming extends Vue {\n\n    get canUpdate(): boolean {\n        return !this.$store.getters.empty && this.$store.state.status === State.Status.idle;\n    }\n\n    created() {\n        Chart.register(\n            ArcElement, LineElement, PointElement,\n            DoughnutController, LineController, RadarController,\n            RadialLinearScale, LinearScale, TimeScale,\n            Filler, Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n\n    get updating(): boolean {\n        return this.$store.state.status === State.Status.queryingBrainstorming;\n    }\n\n    get idle(): boolean {\n        return this.$store.state.status === State.Status.idle;\n    }\n\n    async update() {\n        const count = await service.updateBrainstorming();\n        delibird.inform(`Updated ${count} records`);\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.brainstorming {\n    padding: 1rem;\n\n    > .progress {\n        > .mdc-linear-progress {\n            margin-block-start: 0.4em;\n        }\n    }\n\n    > div:not(:first-child) {\n        margin-block-start: 0.6rem;\n    }\n\n    > .grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 0.6rem;\n\n        @media screen and (min-width: 600px) {\n            &--1-1-1 {\n                grid-template-columns: 1fr 1fr 1fr;\n            }\n        }\n    }\n}\n</style>","<template>\n<chart-block title=\"Coverage\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class CoverageChart extends Vue {\n\n    private static readonly colors = [ 'royalblue', 'gray' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    labels: Array<string> = [ 'Covered', 'Not Covered' ];\n\n    datasets: Array<ChartDataset<'doughnut'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const data = [ 0, 0 ];\n        for (const nomination of nominations) {\n            data[await brainstorming.contains(nomination) ? 0 : 1]++;\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: CoverageChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: CoverageChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        this.datasets = [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class CoverageChart extends Vue {\n\n    private static readonly colors = [ 'royalblue', 'gray' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    labels: Array<string> = [ 'Covered', 'Not Covered' ];\n\n    datasets: Array<ChartDataset<'doughnut'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const data = [ 0, 0 ];\n        for (const nomination of nominations) {\n            data[await brainstorming.contains(nomination) ? 0 : 1]++;\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: CoverageChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: CoverageChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        this.datasets = [ dataset ];\n    }\n}\n","import { render } from \"./Coverage.vue?vue&type=template&id=7584b241\"\nimport script from \"./Coverage.vue?vue&type=script&lang=ts\"\nexport * from \"./Coverage.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Rates\">\n    <chart-view chart-type=\"radar\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class RatesChart extends Vue {\n\n    options: ChartOptions<'radar'> = {\n        elements: {\n            line: { tension: 0 }\n        },\n        scales: {\n            r: {\n                min: 1, max: 5,\n                ticks: { stepSize: 1 }\n            }\n        },\n        plugins: {\n            legend: { display: false },\n        }\n    };\n\n    labels: Array<string> = [ 'Quality', 'Description', 'Cultural', 'Uniqueness', 'Safety', 'Location' ];\n\n    datasets: Array<ChartDataset<'radar'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        type ReviewItem = { count: number, rate: number };\n        const stats: Array<ReviewItem> = [];\n        for (let i = 0; i < 6; ++i) {\n            stats.push({ count: 0, rate: 0 });\n        }\n        const updateReviewItem = (rate: string, item: ReviewItem) => {\n            if (!rate) return;\n            const rateInt = parseInt(rate);\n            if (rateInt === NaN) return;\n            item.count++;\n            item.rate += rateInt;\n        };\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            const query = brainstorming.getFromLocal(nomination)\n                .then(record => {\n                    if (!record) return;\n                    for (const [key, value] of Object.entries(record)) {\n                        if (!key.startsWith('review_')) continue;\n                        const review = value as brainstorming.Review;\n                        updateReviewItem(review.JSON.quality, stats[0]);\n                        updateReviewItem(review.JSON.description, stats[1]);\n                        updateReviewItem(review.JSON.cultural, stats[2]);\n                        updateReviewItem(review.JSON.uniqueness, stats[3]);\n                        updateReviewItem(review.JSON.safety, stats[4]);\n                        updateReviewItem(review.JSON.location, stats[5]);\n                    }\n                });\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const data = stats.map(item => item.rate / item.count);\n        const dataset: ChartDataset<'radar'> = {\n            data: data,\n            borderColor: 'royalblue',\n        };\n        this.datasets = [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class RatesChart extends Vue {\n\n    options: ChartOptions<'radar'> = {\n        elements: {\n            line: { tension: 0 }\n        },\n        scales: {\n            r: {\n                min: 1, max: 5,\n                ticks: { stepSize: 1 }\n            }\n        },\n        plugins: {\n            legend: { display: false },\n        }\n    };\n\n    labels: Array<string> = [ 'Quality', 'Description', 'Cultural', 'Uniqueness', 'Safety', 'Location' ];\n\n    datasets: Array<ChartDataset<'radar'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        type ReviewItem = { count: number, rate: number };\n        const stats: Array<ReviewItem> = [];\n        for (let i = 0; i < 6; ++i) {\n            stats.push({ count: 0, rate: 0 });\n        }\n        const updateReviewItem = (rate: string, item: ReviewItem) => {\n            if (!rate) return;\n            const rateInt = parseInt(rate);\n            if (rateInt === NaN) return;\n            item.count++;\n            item.rate += rateInt;\n        };\n        const queries: Array<Promise<void>> = [];\n        for (const nomination of nominations) {\n            const query = brainstorming.getFromLocal(nomination)\n                .then(record => {\n                    if (!record) return;\n                    for (const [key, value] of Object.entries(record)) {\n                        if (!key.startsWith('review_')) continue;\n                        const review = value as brainstorming.Review;\n                        updateReviewItem(review.JSON.quality, stats[0]);\n                        updateReviewItem(review.JSON.description, stats[1]);\n                        updateReviewItem(review.JSON.cultural, stats[2]);\n                        updateReviewItem(review.JSON.uniqueness, stats[3]);\n                        updateReviewItem(review.JSON.safety, stats[4]);\n                        updateReviewItem(review.JSON.location, stats[5]);\n                    }\n                });\n            queries.push(query);\n        }\n        await Promise.allSettled(queries);\n        const data = stats.map(item => item.rate / item.count);\n        const dataset: ChartDataset<'radar'> = {\n            data: data,\n            borderColor: 'royalblue',\n        };\n        this.datasets = [ dataset ];\n    }\n}\n","import { render } from \"./Rates.vue?vue&type=template&id=14798ebc\"\nimport script from \"./Rates.vue?vue&type=script&lang=ts\"\nexport * from \"./Rates.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Reviews by Month\">\n    <chart-view chart-type=\"line\" :chart-datasets=\"datasets\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock, { fillTimeCountMap } from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class ReviewsByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    datasets: Array<ChartDataset<'line'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const stats = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            const queries: Array<Promise<void>> = [];\n            for (const nomination of nominations) {\n                const query = brainstorming.getFromLocal(nomination)\n                    .then(record => {\n                        if (!record) return;\n                        for (const [key, value] of Object.entries(record)) {\n                            if (!key.startsWith('review_')) continue;\n                            const review = value as brainstorming.Review;\n                            const time = DateTime.fromMillis(review.Timestamp).startOf('month').valueOf();\n                            if (time < min) min = time;\n                            else if (time > max) max = time;\n                            stats.set(time, (stats.get(time) ?? 0) + 1);\n                        }\n                    });\n                queries.push(query);\n            }\n            await Promise.allSettled(queries);\n            fillTimeCountMap(stats, min, max);\n        }\n        const data:  Array<{ x: number, y: number }> = [];\n        for (const [time, count] of stats) {\n            data.push({ x: time, y: count });\n        }\n        data.sort((a, b) => a.x - b.x);\n\n        const dataset: ChartDataset<'line'> = {\n            label: 'Submissions',\n            data: data,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: false,\n        };\n        this.datasets = [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { brainstorming } from '@/service/brainstorming';\n\nimport ChartBlock, { fillTimeCountMap } from '@/components/charts/ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from '@/components/charts/ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class ReviewsByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    datasets: Array<ChartDataset<'line'>> = [];\n\n    mounted() {\n        this.updateData();\n    }\n\n    private async updateData() {\n        const nominations = this.$store.state.nominations;\n        const stats = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            const queries: Array<Promise<void>> = [];\n            for (const nomination of nominations) {\n                const query = brainstorming.getFromLocal(nomination)\n                    .then(record => {\n                        if (!record) return;\n                        for (const [key, value] of Object.entries(record)) {\n                            if (!key.startsWith('review_')) continue;\n                            const review = value as brainstorming.Review;\n                            const time = DateTime.fromMillis(review.Timestamp).startOf('month').valueOf();\n                            if (time < min) min = time;\n                            else if (time > max) max = time;\n                            stats.set(time, (stats.get(time) ?? 0) + 1);\n                        }\n                    });\n                queries.push(query);\n            }\n            await Promise.allSettled(queries);\n            fillTimeCountMap(stats, min, max);\n        }\n        const data:  Array<{ x: number, y: number }> = [];\n        for (const [time, count] of stats) {\n            data.push({ x: time, y: count });\n        }\n        data.sort((a, b) => a.x - b.x);\n\n        const dataset: ChartDataset<'line'> = {\n            label: 'Submissions',\n            data: data,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: false,\n        };\n        this.datasets = [ dataset ];\n    }\n}\n","import { render } from \"./ReviewsByMonth.vue?vue&type=template&id=3d1fce5a\"\nimport script from \"./ReviewsByMonth.vue?vue&type=script&lang=ts\"\nexport * from \"./ReviewsByMonth.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport {\n    Chart,\n    ArcElement, LineElement, PointElement,\n    DoughnutController, LineController, RadarController,\n    RadialLinearScale, LinearScale, TimeScale,\n    Filler, Tooltip, Legend,\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport { service } from '@/service';\nimport { delibird } from '@/service/delibird';\nimport { State } from '@/store';\n\nimport MaterialIconButton from '@/components/material/IconButton.vue';\nimport MaterialLinearProgress from '@/components/material/LinearProgress.vue';\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CoverageChart from '@/components/brainstorming/Coverage.vue';\nimport RatesChart from '@/components/brainstorming/Rates.vue';\nimport ReviewsByMonthChart from '@/components/brainstorming/ReviewsByMonth.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        MaterialIconButton,\n        MaterialLinearProgress,\n        CoverageChart,\n        RatesChart,\n        ReviewsByMonthChart\n    },\n})\nexport default class Brainstorming extends Vue {\n\n    get canUpdate(): boolean {\n        return !this.$store.getters.empty && this.$store.state.status === State.Status.idle;\n    }\n\n    created() {\n        Chart.register(\n            ArcElement, LineElement, PointElement,\n            DoughnutController, LineController, RadarController,\n            RadialLinearScale, LinearScale, TimeScale,\n            Filler, Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n\n    get updating(): boolean {\n        return this.$store.state.status === State.Status.queryingBrainstorming;\n    }\n\n    get idle(): boolean {\n        return this.$store.state.status === State.Status.idle;\n    }\n\n    async update() {\n        const count = await service.updateBrainstorming();\n        delibird.inform(`Updated ${count} records`);\n    }\n}\n","import { render } from \"./Brainstorming.vue?vue&type=template&id=0b0e5d8c\"\nimport script from \"./Brainstorming.vue?vue&type=script&lang=ts\"\nexport * from \"./Brainstorming.vue?vue&type=script&lang=ts\"\n\nimport \"./Brainstorming.vue?vue&type=style&index=0&id=0b0e5d8c&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Brainstorming.vue?vue&type=style&index=0&id=0b0e5d8c&lang=scss\""],"sourceRoot":""}