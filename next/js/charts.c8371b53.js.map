{"version":3,"sources":["webpack:///./src/views/Charts.vue","webpack:///./src/components/charts/CountByMonth.vue","webpack:///./src/components/charts/CountByMonth.vue?045b","webpack:///./src/components/charts/CountByMonth.vue?0ffd","webpack:///./src/components/charts/Interval.vue","webpack:///./src/components/charts/Interval.vue?0c93","webpack:///./src/components/charts/Interval.vue?4386","webpack:///./src/components/charts/Quotas.vue","webpack:///./src/components/charts/Quotas.vue?03b6","webpack:///./src/components/charts/Quotas.vue?1bd8","webpack:///./src/components/charts/Reasons.vue","webpack:///./src/components/charts/Reasons.vue?d24c","webpack:///./src/components/charts/Reasons.vue?6b9c","webpack:///./src/components/charts/Status.vue","webpack:///./src/components/charts/Status.vue?b9cd","webpack:///./src/components/charts/Status.vue?fe82","webpack:///./src/views/Charts.vue?d190","webpack:///./src/views/Charts.vue?5cfe","webpack:///./src/views/Charts.vue?7bcb"],"names":["class","title","navi-back","$store","getters","empty","chart-type","chart-datasets","datasets","chart-options","options","scales","x","type","time","unit","tooltipFormat","displayFormats","month","plugins","tooltip","mode","nominations","this","state","mapSubmissions","Map","mapResults","length","min","fromMillis","confirmedTime","startOf","valueOf","max","nomination","set","get","resultTime","dataSubmissions","dataResults","count","push","y","sort","a","b","datasetSubmissions","label","data","borderColor","pointBackgroundColor","pointRadius","fill","datasetResults","components","ChartBlock","ChartView","render","chart-labels","labels","legend","display","stats","map","pair","interval","dataset","backgroundColor","hoverBackgroundColor","raw","reduce","status","umi","StatusCode","Pending","timeValid","Math","floor","timeDay","i","now","Date","Array","restoreTime","opitons","position","values","colors","color","borderAlign","hoverBorderColor","code","reason","Rejected","reasons","Reason","undeclared","keys","register","defaults","maintainAspectRatio","boxWidth","intersect","elements","line","tension","MaterialTopAppBar","MaterialTopAppBarAdjust","StatusChart","Status","ReasonsChart","Reasons","CountByMonthChart","CountByMonth","IntervalChart","Interval","QuotasChart","Quotas"],"mappings":"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","file":"js/charts.c8371b53.js","sourcesContent":["<template>\n<material-top-app-bar title=\"Charts\" navi-back/>\n<material-top-app-bar-adjust/>\n<main v-if=\"!$store.getters.empty\" class=\"charts\">\n    <div class=\"grid grid--1-2\">\n        <status-chart/>\n        <reasons-chart/>\n    </div>\n    <count-by-month-chart/>\n    <div class=\"grid grid--2-1\">\n        <interval-chart/>\n        <quotas-chart/>\n    </div>\n</main>\n</template>\n\n<script lang=\"ts\">\nimport {\n    Chart,\n    ArcElement, BarElement, LineElement, PointElement,\n    BarController, DoughnutController, LineController,\n    CategoryScale, LogarithmicScale, LinearScale, TimeScale,\n    Tooltip, Legend\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CountByMonthChart from '@/components/charts/CountByMonth.vue';\nimport IntervalChart from '@/components/charts/Interval.vue';\nimport QuotasChart from '@/components/charts/Quotas.vue';\nimport ReasonsChart from '@/components/charts/Reasons.vue';\nimport StatusChart from '@/components/charts/Status.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        StatusChart, ReasonsChart,\n        CountByMonthChart,\n        IntervalChart, QuotasChart\n    },\n})\nexport default class Charts extends Vue {\n\n    created() {\n        Chart.register(\n            ArcElement, BarElement, LineElement, PointElement,\n            BarController, DoughnutController, LineController,\n            CategoryScale, LinearScale, LogarithmicScale, TimeScale,\n            Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.charts {\n    padding: 1rem;\n\n    > div:not(:first-child) {\n        margin-block-start: 0.6rem;\n    }\n\n    > .grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 0.6rem;\n\n        @media screen and (min-width: 600px) {\n            &--1-1 {\n                grid-template-columns: 1fr 1fr;\n            }\n\n            &--1-2 {\n                grid-template-columns: 1fr 2fr;\n            }\n\n            &--2-1 {\n                grid-template-columns: 2fr 1fr;\n            }\n        }\n    }\n}\n</style>","<template>\n<chart-block title=\"Count by Month\">\n    <chart-view chart-type=\"line\" :chart-datasets=\"datasets\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock, { fillTimeCountMap } from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class CountByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    get datasets(): Array<ChartDataset<'line'>> {\n        const nominations = this.$store.state.nominations;\n        const mapSubmissions = new Map<number, number>();\n        const mapResults = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            for (const nomination of nominations) {\n                if (nomination.confirmedTime > 0) {\n                    const time = DateTime.fromMillis(nomination.confirmedTime).startOf('month').valueOf();\n                    if (time < min) min = time;\n                    else if (time > max) max = time;\n                    mapSubmissions.set(time, (mapSubmissions.get(time) ?? 0) + 1);\n                }\n                if (nomination.resultTime > 0) {\n                    const time = DateTime.fromMillis(nomination.resultTime).startOf('month').valueOf();\n                    if (time > max) max = time;\n                    mapResults.set(time, (mapResults.get(time) ?? 0) + 1);\n                }\n            }\n            fillTimeCountMap(mapSubmissions, min, max);\n            fillTimeCountMap(mapResults, min, max);\n        }\n        const dataSubmissions: Array<{ x: number, y: number }> = [];\n        const dataResults: Array<{ x: number, y: number }> = [];\n        for (const [time, count] of mapSubmissions) {\n            dataSubmissions.push({ x: time, y: count });\n        }\n        for (const [time, count] of mapResults) {\n            dataResults.push({ x: time, y: count });\n        }\n        dataSubmissions.sort((a, b) => a.x - b.x);\n        dataResults.sort((a, b) => a.x - b.x);\n\n        const datasetSubmissions: ChartDataset<'line'> = {\n            label: 'Submissions',\n            data: dataSubmissions,\n            borderColor: 'orange',\n            pointBackgroundColor: 'orange',\n            pointRadius: 0,\n            fill: false,\n        };\n        const datasetResults: ChartDataset<'line'> = {\n            label: 'Results',\n            data: dataResults,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: false,\n        };\n        return [ datasetSubmissions, datasetResults ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { DateTime } from 'luxon';\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock, { fillTimeCountMap } from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class CountByMonthChart extends Vue {\n\n    options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'month',\n                    tooltipFormat: 'yyyy-MM',\n                    displayFormats: { month: 'yyyy-MM', }\n                }\n            }\n        },\n        plugins: {\n            tooltip: { mode: 'x' }\n        }\n    };\n\n    get datasets(): Array<ChartDataset<'line'>> {\n        const nominations = this.$store.state.nominations;\n        const mapSubmissions = new Map<number, number>();\n        const mapResults = new Map<number, number>();\n        if (nominations.length > 0) {\n            let min = DateTime.fromMillis(nominations[0].confirmedTime).startOf('month').valueOf();\n            let max = min;\n            for (const nomination of nominations) {\n                if (nomination.confirmedTime > 0) {\n                    const time = DateTime.fromMillis(nomination.confirmedTime).startOf('month').valueOf();\n                    if (time < min) min = time;\n                    else if (time > max) max = time;\n                    mapSubmissions.set(time, (mapSubmissions.get(time) ?? 0) + 1);\n                }\n                if (nomination.resultTime > 0) {\n                    const time = DateTime.fromMillis(nomination.resultTime).startOf('month').valueOf();\n                    if (time > max) max = time;\n                    mapResults.set(time, (mapResults.get(time) ?? 0) + 1);\n                }\n            }\n            fillTimeCountMap(mapSubmissions, min, max);\n            fillTimeCountMap(mapResults, min, max);\n        }\n        const dataSubmissions: Array<{ x: number, y: number }> = [];\n        const dataResults: Array<{ x: number, y: number }> = [];\n        for (const [time, count] of mapSubmissions) {\n            dataSubmissions.push({ x: time, y: count });\n        }\n        for (const [time, count] of mapResults) {\n            dataResults.push({ x: time, y: count });\n        }\n        dataSubmissions.sort((a, b) => a.x - b.x);\n        dataResults.sort((a, b) => a.x - b.x);\n\n        const datasetSubmissions: ChartDataset<'line'> = {\n            label: 'Submissions',\n            data: dataSubmissions,\n            borderColor: 'orange',\n            pointBackgroundColor: 'orange',\n            pointRadius: 0,\n            fill: false,\n        };\n        const datasetResults: ChartDataset<'line'> = {\n            label: 'Results',\n            data: dataResults,\n            borderColor: 'royalblue',\n            pointBackgroundColor: 'royalblue',\n            pointRadius: 0,\n            fill: false,\n        };\n        return [ datasetSubmissions, datasetResults ];\n    }\n}\n","import { render } from \"./CountByMonth.vue?vue&type=template&id=c8765dae\"\nimport script from \"./CountByMonth.vue?vue&type=script&lang=ts\"\nexport * from \"./CountByMonth.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Interval (Days)\">\n    <chart-view chart-type=\"bar\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class IntervalChart extends Vue {\n\n    private static readonly timeValid = 1325347200;\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        return this.stats.map((pair) => pair.interval);\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const data = this.stats.map((pair) => pair.count);\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Array<{ interval: number, count: number}> {\n        const nominations = this.$store.state.nominations;\n        const raw = nominations.reduce((map, nomination) => {\n            if (nomination.status === umi.StatusCode.Pending) return map;\n            if (nomination.confirmedTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < nomination.confirmedTime) return map;\n            const interval = Math.floor((nomination.resultTime - nomination.confirmedTime) / IntervalChart.timeDay);\n            map.set(interval, (map.get(interval) ?? 0) + 1);\n            return map;\n        }, new Map<number, number>());\n        const stats: Array<{ interval: number, count: number}> = [];\n        for (const [interval, count] of raw) {\n            stats.push({ interval: interval, count: count });\n        }\n        stats.sort((a, b) => a.interval - b.interval);\n        return stats;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class IntervalChart extends Vue {\n\n    private static readonly timeValid = 1325347200;\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        return this.stats.map((pair) => pair.interval);\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const data = this.stats.map((pair) => pair.count);\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Array<{ interval: number, count: number}> {\n        const nominations = this.$store.state.nominations;\n        const raw = nominations.reduce((map, nomination) => {\n            if (nomination.status === umi.StatusCode.Pending) return map;\n            if (nomination.confirmedTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < IntervalChart.timeValid) return map;\n            if (nomination.resultTime < nomination.confirmedTime) return map;\n            const interval = Math.floor((nomination.resultTime - nomination.confirmedTime) / IntervalChart.timeDay);\n            map.set(interval, (map.get(interval) ?? 0) + 1);\n            return map;\n        }, new Map<number, number>());\n        const stats: Array<{ interval: number, count: number}> = [];\n        for (const [interval, count] of raw) {\n            stats.push({ interval: interval, count: count });\n        }\n        stats.sort((a, b) => a.interval - b.interval);\n        return stats;\n    }\n}\n","import { render } from \"./Interval.vue?vue&type=template&id=6b65deb0\"\nimport script from \"./Interval.vue?vue&type=script&lang=ts\"\nexport * from \"./Interval.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Quotas (Days)\">\n    <chart-view chart-type=\"bar\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class QuotasChart extends Vue {\n\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        const labels: Array<number> = [];\n        for (let i = 0; i < 14; i++) {\n            labels.push(i);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const nominations = this.$store.state.nominations;\n        const now = Date.now();\n        const data = new Array(14).fill(0);\n        for (const nomination of nominations) {\n            const restoreTime = nomination.restoreTime;\n            if (restoreTime > now) {\n                data[Math.floor((restoreTime - now) / QuotasChart.timeDay)] += 1;\n            }\n        }\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class QuotasChart extends Vue {\n\n    private static readonly timeDay = 24 * 3600 * 1000;\n\n    options: ChartOptions<'bar'> = {\n        plugins: {\n            legend: { display: false }\n        }\n    };\n\n    get labels(): Array<number> {\n        const labels: Array<number> = [];\n        for (let i = 0; i < 14; i++) {\n            labels.push(i);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'bar'>> {\n        const nominations = this.$store.state.nominations;\n        const now = Date.now();\n        const data = new Array(14).fill(0);\n        for (const nomination of nominations) {\n            const restoreTime = nomination.restoreTime;\n            if (restoreTime > now) {\n                data[Math.floor((restoreTime - now) / QuotasChart.timeDay)] += 1;\n            }\n        }\n        const dataset: ChartDataset<'bar'> = {\n            data: data,\n            backgroundColor: 'royalblue',\n            hoverBackgroundColor: 'royalblue',\n        };\n        return [ dataset ];\n    }\n}\n","import { render } from \"./Quotas.vue?vue&type=template&id=f7334106\"\nimport script from \"./Quotas.vue?vue&type=script&lang=ts\"\nexport * from \"./Quotas.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Reasons\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"opitons\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class ReasonsChart extends Vue {\n\n    opitons: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const stats = this.stats;\n        const labels: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            labels.push(pair[0].title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = this.stats;\n        const data: Array<number> = [];\n        const colors: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            data.push(pair[1]);\n            colors.push(pair[0].color);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Map<umi.ReasonCode, [umi.Reason, number]> {\n        const stats = new Map<umi.ReasonCode, [umi.Reason, number]>();\n        for (const [code, reason] of umi.reason) {\n            stats.set(code, [reason, 0]);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            if (nomination.status !== umi.StatusCode.Rejected) return map;\n            if (nomination.reasons.length > 0) {\n                for (const code of nomination.reasons) {\n                    map.get(code)![1]++;\n                }\n            } else {\n                map.get(umi.Reason.undeclared)![1]++;\n            }\n            return map;\n        }, stats);\n        return stats;\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class ReasonsChart extends Vue {\n\n    opitons: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const stats = this.stats;\n        const labels: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            labels.push(pair[0].title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = this.stats;\n        const data: Array<number> = [];\n        const colors: Array<string> = [];\n        for (const pair of stats.values()) {\n            if (pair[1] < 1) continue;\n            data.push(pair[1]);\n            colors.push(pair[0].color);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n\n    private get stats(): Map<umi.ReasonCode, [umi.Reason, number]> {\n        const stats = new Map<umi.ReasonCode, [umi.Reason, number]>();\n        for (const [code, reason] of umi.reason) {\n            stats.set(code, [reason, 0]);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            if (nomination.status !== umi.StatusCode.Rejected) return map;\n            if (nomination.reasons.length > 0) {\n                for (const code of nomination.reasons) {\n                    map.get(code)![1]++;\n                }\n            } else {\n                map.get(umi.Reason.undeclared)![1]++;\n            }\n            return map;\n        }, stats);\n        return stats;\n    }\n}\n","import { render } from \"./Reasons.vue?vue&type=template&id=6ad8c691\"\nimport script from \"./Reasons.vue?vue&type=script&lang=ts\"\nexport * from \"./Reasons.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n<chart-block title=\"Status\">\n    <chart-view chart-type=\"doughnut\" :chart-datasets=\"datasets\" :chart-labels=\"labels\" :chart-options=\"options\"/>\n</chart-block>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class StatusChart extends Vue {\n\n    private static readonly colors = [ '#CAAF85', '#35C572', '#B0373C' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const labels: Array<string> = [];\n        for (const status of umi.status.values()) {\n            labels.push(status.title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = new Map<umi.StatusCode, number>();\n        for (const code of umi.status.keys()) {\n            stats.set(code, 0);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            map.set(nomination.status, map.get(nomination.status)! + 1);\n            return map;\n        }, stats);\n\n        const data: Array<number> = [];\n        for (const count of stats.values()) {\n            data.push(count);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: StatusChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: StatusChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>","\nimport { Vue, Options } from 'vue-property-decorator';\n\nimport { umi } from '@/service/umi';\n\nimport ChartBlock from './ChartBlock.vue';\nimport ChartView, { ChartDataset, ChartOptions } from './ChartView.vue';\n\n@Options({\n    components: {\n        ChartBlock, ChartView\n    }\n})\nexport default class StatusChart extends Vue {\n\n    private static readonly colors = [ '#CAAF85', '#35C572', '#B0373C' ];\n\n    options: ChartOptions<'doughnut'> = {\n        plugins: {\n            legend: { display: true, position: 'right', },\n        }\n    };\n\n    get labels(): Array<string> {\n        const labels: Array<string> = [];\n        for (const status of umi.status.values()) {\n            labels.push(status.title);\n        }\n        return labels;\n    }\n\n    get datasets(): Array<ChartDataset<'doughnut'>> {\n        const stats = new Map<umi.StatusCode, number>();\n        for (const code of umi.status.keys()) {\n            stats.set(code, 0);\n        }\n        this.$store.state.nominations.reduce((map, nomination) => {\n            map.set(nomination.status, map.get(nomination.status)! + 1);\n            return map;\n        }, stats);\n\n        const data: Array<number> = [];\n        for (const count of stats.values()) {\n            data.push(count);\n        }\n        const dataset: ChartDataset<'doughnut'> = {\n            data: data,\n            backgroundColor: StatusChart.colors,\n            borderAlign: 'inner',\n            borderColor: 'rgba(0, 0, 0, 0.2)',\n            hoverBackgroundColor: StatusChart.colors,\n            hoverBorderColor: 'rgba(0, 0, 0, 0.4)',\n        };\n        return [ dataset ];\n    }\n}\n","import { render } from \"./Status.vue?vue&type=template&id=1e7dffb0\"\nimport script from \"./Status.vue?vue&type=script&lang=ts\"\nexport * from \"./Status.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport {\n    Chart,\n    ArcElement, BarElement, LineElement, PointElement,\n    BarController, DoughnutController, LineController,\n    CategoryScale, LogarithmicScale, LinearScale, TimeScale,\n    Tooltip, Legend\n} from 'chart.js';\nimport 'chartjs-adapter-luxon';\nimport { Vue, Options } from 'vue-class-component';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\nimport CountByMonthChart from '@/components/charts/CountByMonth.vue';\nimport IntervalChart from '@/components/charts/Interval.vue';\nimport QuotasChart from '@/components/charts/Quotas.vue';\nimport ReasonsChart from '@/components/charts/Reasons.vue';\nimport StatusChart from '@/components/charts/Status.vue';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n        StatusChart, ReasonsChart,\n        CountByMonthChart,\n        IntervalChart, QuotasChart\n    },\n})\nexport default class Charts extends Vue {\n\n    created() {\n        Chart.register(\n            ArcElement, BarElement, LineElement, PointElement,\n            BarController, DoughnutController, LineController,\n            CategoryScale, LinearScale, LogarithmicScale, TimeScale,\n            Tooltip, Legend\n        );\n        Chart.defaults.maintainAspectRatio = false;\n        Chart.defaults.plugins.legend!.labels.boxWidth = 10;\n        Chart.defaults.plugins.tooltip!.intersect = false;\n        Chart.defaults.elements.line!.tension = 0.1;\n    }\n}\n","import { render } from \"./Charts.vue?vue&type=template&id=6ff6bec6\"\nimport script from \"./Charts.vue?vue&type=script&lang=ts\"\nexport * from \"./Charts.vue?vue&type=script&lang=ts\"\n\nimport \"./Charts.vue?vue&type=style&index=0&id=6ff6bec6&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Charts.vue?vue&type=style&index=0&id=6ff6bec6&lang=scss\""],"sourceRoot":""}